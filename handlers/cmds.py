from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from sqlalchemy.future import select
from config_reader import config
from keyboards import builders
from yandex import YandexMusicSDK
from orm.db import AsyncSessionLocal, User, Track  
from sqlalchemy import func

import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

router = Router()

async def get_user_by_chat_id(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User –ø–æ chat_id."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.chat_id == chat_id))
        return result.scalars().first()

async def get_user_by_username(username: str):
    """–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User –ø–æ username."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.username == username))
        return result.scalars().first()

async def get_user_tracks(user_id: int):
    """–ü–æ–ª—É—á–∞–µ–º MFCC-—Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Track.mfcc, Track.artist).where(Track.user_id == user_id))
        return result.fetchall()  # [(mfcc, artist), ...]
    
async def get_user_track_count(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(func.count()).where(Track.user_id == user_id))
        return result.scalar() or 0  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤, –≤–µ—Ä–Ω—ë—Ç 0

# def calculate_mean_mfcc(tracks):
#     """–í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π MFCC-–≤–µ–∫—Ç–æ—Ä –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º."""
#     if not tracks:
#         return np.zeros(20)

#     artist_mfcc = {}
#     for mfcc, artist in tracks:
#         mfcc_vector = np.frombuffer(mfcc, dtype=np.float32).reshape(20, -1).mean(axis=1)
#         artist_mfcc.setdefault(artist, []).append(mfcc_vector)

#     mean_vectors = [np.mean(vectors, axis=0) for vectors in artist_mfcc.values()]
#     return np.mean(mean_vectors, axis=0) if mean_vectors else np.zeros(20)

def calculate_mean_mfcc(tracks):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π MFCC-–≤–µ–∫—Ç–æ—Ä + –¥–∏—Å–ø–µ—Ä—Å–∏—é, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ."""
    if not tracks:
        return np.zeros(40)  # –£–¥–≤–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–µ–µ + –¥–∏—Å–ø–µ—Ä—Å–∏—è)

    artist_mfcc = {}
    for mfcc, artist in tracks:
        mfcc_vector = np.frombuffer(mfcc, dtype=np.float32).reshape(20, -1).mean(axis=1)
        artist_mfcc.setdefault(artist, []).append(mfcc_vector)

    mean_vectors = [np.mean(vectors, axis=0) for vectors in artist_mfcc.values()]
    var_vectors = [np.var(vectors, axis=0) for vectors in artist_mfcc.values()]

    mean_mfcc = np.mean(mean_vectors, axis=0) if mean_vectors else np.zeros(20)
    var_mfcc = np.mean(var_vectors, axis=0) if var_vectors else np.zeros(20)

    return np.concatenate([mean_mfcc, var_mfcc])  # –í–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–º 40

async def match_users(user1_id: int, user2_id: int):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∫—É—Å—ã –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    vec1 = calculate_mean_mfcc(await get_user_tracks(user1_id))
    vec2 = calculate_mean_mfcc(await get_user_tracks(user2_id))
    return max(0, cosine_similarity([vec1], [vec2])[0][0] * 100)

@router.message(Command("match"))
async def handle_match(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /match @username."""
    args = message.text.split()
    if len(args) != 2 or not args[1].startswith("@"):
        return await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: `/match @username`")

    sender = await get_user_by_chat_id(message.from_user.id)
    receiver = await get_user_by_username(args[1][1:])

    if not sender or not receiver:
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

    similarity = await match_users(sender.id, receiver.id)
    await message.reply(f"üéµ –¢–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –º—ç—Ç—á —Å @{receiver.username}: {similarity:.2f}%")

@router.message(CommandStart())
@router.callback_query(F.data == "main_page")
async def start(msg: Message | CallbackQuery):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    text = f"–•—ç–ª–ª–æ—É, @{msg.from_user.username}! üåü –ê–π–º - –ë–∞—Ç—è –æ—Ñ –°–∏–Ω—Ö"
    buttons = builders.inline_builder(["‚öôÔ∏è Load song", "üåê Matching!"], ["song", "match"])

    if isinstance(msg, CallbackQuery):
        await msg.message.edit_text(text, reply_markup=buttons)
        await msg.answer()
    else:
        await msg.answer(text, reply_markup=buttons)

@router.message(F.text)
async def handle_download(msg: Message):
    """–ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ."""
    async with YandexMusicSDK(token=config.access_token.get_secret_value(), upload_dir="downloads") as sdk:
        tracks = await sdk.search_tracks(msg.text, count=1, download=False, lyrics=False)
        if not tracks:
            return await msg.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        track = tracks[0]
        await msg.answer(f"üéµ –ù–∞–π–¥–µ–Ω–æ: {track.title} - {', '.join(track.artists)}",
                         reply_markup=builders.inline_builder(["‚úî Confirm"], [f"confirm:{track.title} - {', '.join(track.artists)}"]))
